% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add-headline-column.R
\name{add_headline_column}
\alias{add_headline_column}
\title{Add column of headlines}
\usage{
add_headline_column(
  df,
  x,
  y,
  headline = "{trend} of {delta} ({orig_values})",
  ...,
  .name = "headline",
  if_match = "There was no difference.",
  trend_phrases = headliner::trend_terms(),
  plural_phrases = NULL,
  orig_values = "{x} vs. {y}",
  n_decimal = 1,
  round_all = TRUE,
  multiplier = 1,
  return_cols = .name
)
}
\arguments{
\item{df}{data frame, must be a single row}

\item{x}{a numeric value to compare to the reference value of 'y'}

\item{y}{a numeric value to act as a control for the 'x' value}

\item{headline}{a string to format the final output. Uses
\code{\link[glue]{glue}} syntax}

\item{...}{
  Arguments passed on to \code{\link[glue:glue]{glue::glue_data}}
  \describe{
    \item{\code{.sep}}{[\code{character(1)}: \sQuote{""}]\cr Separator used to separate elements.}
    \item{\code{.envir}}{[\code{environment}: \code{parent.frame()}]\cr Environment to evaluate each expression in. Expressions are
evaluated from left to right. If \code{.x} is an environment, the expressions are
evaluated in that environment and \code{.envir} is ignored. If \code{NULL} is passed, it is equivalent to \code{\link[=emptyenv]{emptyenv()}}.}
    \item{\code{.open}}{[\code{character(1)}: \sQuote{\\{}]\cr The opening delimiter. Doubling the
full delimiter escapes it.}
    \item{\code{.close}}{[\code{character(1)}: \sQuote{\\}}]\cr The closing delimiter. Doubling the
full delimiter escapes it.}
    \item{\code{.na}}{[\code{character(1)}: \sQuote{NA}]\cr Value to replace \code{NA} values
with. If \code{NULL} missing values are propagated, that is an \code{NA} result will
cause \code{NA} output. Otherwise the value is replaced by the value of \code{.na}.}
    \item{\code{.null}}{[\code{character(1)}: \sQuote{character()}]\cr Value to replace
NULL values with. If \code{character()} whole output is \code{character()}. If
\code{NULL} all NULL values are dropped (as in \code{paste0()}). Otherwise the
value is replaced by the value of \code{.null}.}
    \item{\code{.comment}}{[\code{character(1)}: \sQuote{#}]\cr Value to use as the comment
character.}
    \item{\code{.literal}}{[\code{boolean(1)}: \sQuote{FALSE}]\cr Whether to treat single or
double quotes, backticks, and comments as regular characters (vs. as
syntactic elements), when parsing the expression string. Setting \code{.literal = TRUE} probably only makes sense in combination with a custom
\code{.transformer}, as is the case with \code{glue_col()}. Regard this argument
(especially, its name) as experimental.}
    \item{\code{.transformer}}{[\verb{function]}\cr A function taking three parameters \code{code}, \code{envir} and
\code{data} used to transform the output of each block before, during, or after
evaluation. For example transformers see \code{vignette("transformers")}.}
    \item{\code{.trim}}{[\code{logical(1)}: \sQuote{TRUE}]\cr Whether to trim the input
template with \code{\link[glue:trim]{trim()}} or not.}
  }}

\item{.name}{string value for the name of the new column to create}

\item{if_match}{string to display if numbers match, uses
\code{\link[glue]{glue}} syntax}

\item{trend_phrases}{list of values to use for when y is more than x, y is the
same as x, or y is less than x. You can pass it just
\code{\link{trend_terms}} (the default) and call the result with
\code{"...{trend}..."} or pass is a named list (see examples)}

\item{plural_phrases}{named list of values to use when difference (delta) is
singular (delta = 1) or plural (delta != 1)}

\item{orig_values}{a string using \code{\link[glue]{glue}} syntax.
example: \verb{(\{x\} vs \{y\})}}

\item{n_decimal}{numeric value to limit the number of decimal places in
the returned values.}

\item{round_all}{logical value to indicate if all values should be rounded.
When FALSE, the values will return with no modification. When TRUE (default)
all values will be round to the length specified by 'n_decimal'.}

\item{multiplier}{number indicating the scaling factor. When multiplier = 1
(default), 0.25 will return 0.25. When multiplier = 100, 0.25 will return 25.}

\item{return_cols}{arguments that can be passed to
\code{\link[dplyr]{select}}, ex: c("a", "b"),
\code{\link[dplyr]{starts_with}}, etc.}
}
\description{
Add column of headlines
}
\examples{

# You can use 'add_headline_column()' instead of
# `mutate(headline = map2_chr(...))`
# here is an example comparing the sleeping habits of animals
head(animal_sleep) |>
  dplyr::select(common_name, hours_asleep, hours_awake) |>
  add_headline_column(
    x = hours_asleep,
    y = hours_awake,
    headline = "The {common_name} spends {delta} more {hours} {trend} than not {trend}.",
    trend_phrases = trend_terms(more = "asleep", less = "awake"),
    plural_phrases = list(hours = plural_phrasing(single = "hour", multi = "hours"))
  ) |>
  knitr::kable("pandoc")


# you can also use 'return_cols' to return any and all "talking points".
# You can use tidyselect helpers like 'starts_with("delta")' or
# 'everything()'. In this example, I returned the delta & trend columns
# and identified the rows at the extremes
head(animal_sleep) |>
  dplyr::select(common_name, hours_asleep, hours_awake) |>
  add_headline_column(
    x = hours_asleep,
    y = hours_awake,
    headline = "more time {trend} ({orig_values} hours)",
    trend_phrases = trend_terms(more = "alseep", less = "awake"),
    return_cols = c("delta", "trend")
  ) |>
  dplyr::filter(delta \%in\% range(delta)) |>
  knitr::kable("pandoc")

}
